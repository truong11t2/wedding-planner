services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
    depends_on:
      - backend
    networks:
      - wedding-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wedding-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "-q", "--spider", "http://localhost:5000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wedding-network
    restart: unless-stopped
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  wedding-network:
    driver: bridge